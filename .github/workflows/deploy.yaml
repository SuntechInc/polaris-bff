name: Deploy Aurora BFF

on:
  push:
    branches:
      - main
      - develop

env:
  IMAGE_NAME: lucassuntech/aurora-bff

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v3

      - name: Determine Docker tag (short SHA)
        run: echo "TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Login no Docker Hub
        run: |
          echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" \
            | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push Docker images
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            IMAGE="${IMAGE_NAME}:${TAG}"
            docker build -t $IMAGE .
            docker tag $IMAGE $IMAGE_NAME:latest
            docker push "$IMAGE"
            docker push "$IMAGE_NAME:latest"
          else
            IMAGE="${IMAGE_NAME}:develop-${TAG}"
            docker build -t $IMAGE .
            docker tag $IMAGE $IMAGE_NAME:develop
            docker push "$IMAGE"
            docker push "$IMAGE_NAME:develop"
          fi

  deploy-to-k8s:
    name: Deploy to Kubernetes
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: SSH & rollout restart
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Configuração do kubectl
            export KUBECONFIG=/home/ci-deploy/.kube/config
            
            # Verifica se o cluster está acessível
            if ! kubectl cluster-info &> /dev/null; then
              echo "Erro: Não foi possível conectar ao cluster Kubernetes"
              exit 1
            fi
            
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              NAMESPACE=bff-prod
              IMAGE_TAG=latest
            else
              NAMESPACE=bff-homolog
              IMAGE_TAG=develop
            fi
            
            DEPLOYMENT=aurora-bff
            
            echo "Restarting $DEPLOYMENT in namespace $NAMESPACE to pull :$IMAGE_TAG"
            
            # Verifica se o namespace existe
            if ! kubectl get namespace $NAMESPACE &> /dev/null; then
              echo "Erro: Namespace $NAMESPACE não encontrado"
              exit 1
            fi
            
            # Verifica se o deployment existe
            if ! kubectl get deployment $DEPLOYMENT -n $NAMESPACE &> /dev/null; then
              echo "Erro: Deployment $DEPLOYMENT não encontrado no namespace $NAMESPACE"
              exit 1
            fi
            
            kubectl rollout restart deployment/${DEPLOYMENT} -n ${NAMESPACE}
            
            kubectl rollout status deployment/${DEPLOYMENT} \
              -n ${NAMESPACE} \
              --timeout=120s
